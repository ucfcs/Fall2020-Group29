[{"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/index.js":"1","/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/reportWebVitals.js":"2","/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/App.js":"3","/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/Components/Result.js":"4","/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/Components/ThankYou.js":"5"},{"size":500,"mtime":1610884639990,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1610884639990,"results":"8","hashOfConfig":"7"},{"size":4476,"mtime":1619203236000,"results":"9","hashOfConfig":"7"},{"size":15289,"mtime":1619202698076,"results":"10","hashOfConfig":"7"},{"size":1163,"mtime":1619212065176,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"ii4i1d",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/index.js",[],["25","26"],"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/reportWebVitals.js",[],"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/App.js",[],"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/Components/Result.js",["27"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nimport Chatbot, { Loading } from \"react-simple-chatbot\";\nimport styles from \"./Result.module.css\";\nimport Linkify from \"react-linkify\";\n\nclass Result extends Component {\n  constructor(props) {\n    super(props);\n\n    // sets initial states\n    this.state = {\n      loading: true,\n      result: \"\",\n      threshold: \"\",\n      trigger: false,\n    };\n\n    // this.triggetNext(\"Greeting\");\n  }\n\n  async componentDidMount() {\n    const { steps } = this.props;\n    const lookup = steps.userInput.value;\n    const input = { name: lookup };\n    // stores returned data in api_response\n    const api_response = await axios.post(\n      \"http://127.0.0.1:5000/api/get-user-response\",\n      input\n    );\n    // set the state to the relevant data it needs to hold\n    this.setState({\n      loading: false,\n      result: api_response.data.answer,\n      threshold: api_response.data.probability,\n    });\n\n    // const feedbackAnswer = steps.answer.value;\n    // console.log(feedbackAnswer);\n  }\n\n  getFeedBack() {\n    const { steps } = this.props;\n    const feedbackAnswer = steps.answer.value;\n    console.log(feedbackAnswer);\n  }\n\n  // increments the counter and stores it back into local storage\n  increment = () => {\n    let count = sessionStorage.getItem(\"counter\");\n    if (count === undefined) {\n      count = 0;\n    }\n    count++;\n    sessionStorage.setItem(\"counter\", count);\n  };\n\n  // resets the counter to 0 and stores it back to local storage\n  reset = () => {\n    sessionStorage.setItem(\"counter\", 0);\n  };\n\n  // Triggers the next entity in the steps (from react-simple-chatbot)\n  triggerGreeting() {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep({ trigger: \"Greeting\" });\n    });\n  }\n  // Step 2 from conversation design\n  triggerMoreHelp() {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep({ trigger: \"More Help\" });\n    });\n  }\n  // triggers thank you\n  triggerThankYou() {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep({ trigger: \"Thank you\" });\n    });\n  }\n  // triggers Even More Help\n  triggerEvenMoreHelp() {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep({ trigger: \"Even More Help\" });\n    });\n  }\n\n  // triggers Sorry Thank you\n  triggerSorryThankYou() {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep({ trigger: \"Sorry Thank you\" });\n    });\n  }\n\n  // triggers ask again differently\n  triggerAskAgainDifferently() {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep({ trigger: \"ask again differently\" });\n    });\n  }\n\n  // Renders the answer display box in the chatbot\n  render() {\n    // the constants that are passed in the render (state values)\n    const { trigger, loading, result, threshold } = this.state;\n    // console.log(threshold);\n    let counter = sessionStorage.getItem(\"counter\");\n    // null check\n    if (counter === undefined) {\n      counter = 0;\n      sessionStorage.setItem(\"counter\", counter);\n    }\n    console.log(\"this is counter \" + counter);\n\n    // if result if no match then ask again\n    if (counter < 2) {\n      if (result !== \"no match\") {\n        // Threshold 2 within counter < 2\n        if (threshold > 0.99) {\n          return (\n            <div className={styles.body}>\n              {loading ? (\n                <Loading />\n              ) : (\n                <Linkify className={styles.linkify}>{result}</Linkify>\n              )}\n              {!loading && (\n                <div\n                  style={{\n                    textAlign: \"center\",\n                    margin: 20,\n                  }}\n                >\n                  Is there something else I can help you with?\n                  <div>\n                    {!trigger && (\n                      <button\n                        className={styles.button}\n                        onClick={() => {\n                          this.triggerMoreHelp();\n                          this.reset();\n                        }}\n                      >\n                        Yes\n                      </button>\n                    )}\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerThankYou();\n                          // this.reset();\n                        }}\n                        className={styles.button}\n                      >\n                        No\n                      </button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        }\n\n        // Threshold  1 and 2 (.50 - .90) within counter < 2\n        if (threshold < 0.99 && threshold > 0.5) {\n          return (\n            <div className={styles.body}>\n              {loading ? <Loading /> : <Linkify>{result}</Linkify>}\n              {!loading && (\n                <div\n                  style={{\n                    textAlign: \"center\",\n                    margin: 20,\n                  }}\n                >\n                  Did this answer your question?\n                  <div>\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerEvenMoreHelp();\n                          this.reset();\n                        }}\n                        className={styles.button}\n                      >\n                        Yes\n                      </button>\n                    )}\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerAskAgainDifferently();\n                          this.increment();\n                        }}\n                        className={styles.button}\n                      >\n                        No\n                      </button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        }\n\n        // Threshold 1 within counter < 2\n        if (threshold < 0.5) {\n          return (\n            <div className={styles.body}>\n              {loading ? (\n                <Loading />\n              ) : (\n                \"Sorry I don't quite understand your question. Could you try asking it slightly differently? \"\n              )}\n              {!loading && (\n                <div\n                  style={{\n                    textAlign: \"center\",\n                    margin: 20,\n                  }}\n                >\n                  <div>\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerMoreHelp();\n                          this.increment();\n                        }}\n                        className={styles.button}\n                      >\n                        Yes\n                      </button>\n                    )}\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerThankYou();\n                          this.reset();\n                        }}\n                        className={styles.button}\n                      >\n                        No\n                      </button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        }\n      }\n      // if result === no match\n      else {\n        return (\n          <div className={styles.body}>\n            {loading ? (\n              <Loading />\n            ) : (\n              \"Couldn't find what you were looking for. Would you like to try again?\"\n            )}\n            {!loading && (\n              <div\n                style={{\n                  textAlign: \"center\",\n                  margin: 20,\n                }}\n              >\n                <div>\n                  {!trigger && (\n                    <button\n                      onClick={() => {\n                        this.triggerMoreHelp();\n                        this.increment();\n                      }}\n                      className={styles.button}\n                    >\n                      Yes\n                    </button>\n                  )}\n                  {!trigger && (\n                    <button\n                      onClick={() => {\n                        this.triggerSorryThankYou();\n                        this.reset();\n                      }}\n                      className={styles.button}\n                    >\n                      No\n                    </button>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      }\n    }\n    // if counter >= 2\n    else {\n      if (result !== \"no match\") {\n        // Threshold 2 within else (if counter >= 2)\n        if (threshold > 0.99) {\n          return (\n            <div className={styles.body}>\n              {loading ? <Loading /> : <Linkify>{result}</Linkify>}\n              {!loading && (\n                <div\n                  style={{\n                    textAlign: \"center\",\n                    margin: 20,\n                  }}\n                >\n                  Is there something else I can help you with?\n                  <div>\n                    {!trigger && (\n                      <button\n                        className={styles.button}\n                        onClick={() => {\n                          this.triggerMoreHelp();\n                          this.reset();\n                        }}\n                      >\n                        Yes\n                      </button>\n                    )}\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerThankYou();\n                          this.reset();\n                        }}\n                        className={styles.button}\n                      >\n                        No\n                      </button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        }\n\n        // Threshold  1 and 2 (.50 - .90)\n        if (threshold < 0.99 && threshold > 0.5) {\n          return (\n            <div className={styles.body}>\n              {loading ? <Loading /> : <Linkify>{result}</Linkify>}\n              {!loading && (\n                <div\n                  style={{\n                    textAlign: \"center\",\n                    margin: 20,\n                  }}\n                >\n                  Did this answer your question?\n                  <div>\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerEvenMoreHelp();\n                          this.reset();\n                        }}\n                        className={styles.button}\n                      >\n                        Yes\n                      </button>\n                    )}\n                    {!trigger && (\n                      <button\n                        onClick={() => this.triggerMoreHelp()}\n                        className={styles.button}\n                      >\n                        No\n                      </button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        }\n\n        // Threshold 1 within else (if counter >= 2)\n        if (threshold <= 0.5) {\n          return (\n            <div className={styles.body}>\n              {loading ? (\n                <Loading />\n              ) : (\n                \"Sorry I don't think I have the knug wisdom to answer your question. Please email a qualified personnel \"\n              )}\n              {!loading && (\n                <div\n                  style={{\n                    textAlign: \"center\",\n                    margin: 20,\n                  }}\n                >\n                  {/* <div>\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerMoreHelp();\n                          this.increment();\n                        }}\n                        className={styles.button}\n                      >\n                        Yes\n                      </button>\n                    )}\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerThankYou();\n                          this.reset();\n                        }}\n                        className={styles.button}\n                      >\n                        No\n                      </button>\n                    )}\n                  </div> */}\n                </div>\n              )}\n            </div>\n          );\n        }\n      } else {\n        return (\n          <div className={styles.body}>\n            {loading ? (\n              <Loading />\n            ) : (\n              \"Couldn't find what you were looking for. Please contact EMAIL for more help with your question\"\n            )}\n            {!loading && (\n              <div\n                style={{\n                  textAlign: \"center\",\n                  margin: 20,\n                }}\n              >\n                {/* <div>\n                  {!trigger && (\n                    <button\n                      onClick={() => this.triggerMoreHelp()}\n                      className={styles.button}\n                    >\n                      Yes\n                    </button>\n                  )}\n                  {!trigger && (\n                    <button\n                      onClick={() => this.triggerSorryThankYou()}\n                      className={styles.button}\n                    >\n                      No\n                    </button>\n                  )}\n                </div> */}\n              </div>\n            )}\n          </div>\n        );\n      }\n    }\n    // return (\n    //   <div className={styles.body}>\n    //     {loading ? (\n    //       <Loading />\n    //     ) : (\n    //       \"Couldn't find what you were looking for. Would you like to try again?\"\n    //     )}\n    //     {!loading && (\n    //       <div\n    //         style={{\n    //           textAlign: \"center\",\n    //           margin: 20,\n    //         }}\n    //       >\n    //         <div>\n    //           {!trigger && (\n    //             <button\n    //               onClick={() => this.triggerMoreHelp()}\n    //               className={styles.button}\n    //             >\n    //               Yes\n    //             </button>\n    //           )}\n    //           {!trigger && (\n    //             <button\n    //               onClick={() => this.triggerSorryThankYou()}\n    //               className={styles.button}\n    //             >\n    //               No\n    //             </button>\n    //           )}\n    //         </div>\n    //       </div>\n    //     )}\n    //   </div>\n    // );\n  }\n}\nResult.propTypes = {\n  steps: PropTypes.object,\n  triggerNextStep: PropTypes.func,\n};\n\nResult.defaultProps = {\n  steps: undefined,\n  triggerNextStep: undefined,\n};\n\nexport default Result;\n",["28","29"],"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/Components/ThankYou.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":4,"column":8,"nodeType":"36","messageId":"37","endLine":4,"endColumn":15},{"ruleId":"30","replacedBy":"38"},{"ruleId":"32","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'Chatbot' is defined but never used.","Identifier","unusedVar",["40"],["41"],"no-global-assign","no-unsafe-negation"]