[{"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/index.js":"1","/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/reportWebVitals.js":"2","/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/App.js":"3"},{"size":500,"mtime":1610884639990,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1610884639990,"results":"6","hashOfConfig":"5"},{"size":5044,"mtime":1614878230515,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"ii4i1d",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/index.js",[],["16","17"],"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/reportWebVitals.js",[],"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/App.js",["18","19"],"import \"./App.css\";\r\nimport Knugget from \"./Knugget.jpg\";\r\nimport React, { useState, useEffect, Component } from \"react\";\r\nimport ChatBot, { Loading } from \"react-simple-chatbot\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Result extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loading: true,\r\n      department: \"\",\r\n      category: \"\",\r\n      result: \"\",\r\n      trigger: false,\r\n    };\r\n\r\n    this.triggetNext = this.triggetNext.bind(this);\r\n  }\r\n  async componentDidMount() {\r\n    const { steps } = this.props;\r\n    const lookup = steps.userInput.value;\r\n    const input = { name: lookup };\r\n    const api_response = await axios.post(\r\n      \"http://127.0.0.1:5000/api/user-response\",\r\n      input\r\n    );\r\n    this.setState({\r\n      loading: false,\r\n      result: api_response,\r\n      department: api_response.data.department,\r\n      category: api_response.data.category,\r\n    });\r\n  }\r\n  triggetNext() {\r\n    this.setState({ trigger: true }, () => {\r\n      this.props.triggerNextStep();\r\n    });\r\n  }\r\n  render() {\r\n    const { trigger, loading, department, category, result } = this.state;\r\n    // console.log(department);\r\n    // console.log(category);\r\n    console.log(result);\r\n    return (\r\n      <div\r\n        style={{\r\n          textAlign: \"center\",\r\n          padding: 15,\r\n          margin: 30,\r\n          fontFamily: \"Arial\",\r\n          fontSize: \"12pt\",\r\n          backgroundColor: \"#eee\",\r\n          borderRadius: 25,\r\n        }}\r\n      >\r\n        {loading ? (\r\n          <Loading />\r\n        ) : (\r\n          \"1.) Department: \" + department + \" 2.) Category: \" + category\r\n        )}\r\n        {!loading && (\r\n          <div\r\n            style={{\r\n              textAlign: \"center\",\r\n              margin: 20,\r\n            }}\r\n          >\r\n            {!trigger && (\r\n              <button onClick={() => this.triggetNext()}>Try again</button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nResult.propTypes = {\r\n  steps: PropTypes.object,\r\n  triggerNextStep: PropTypes.func,\r\n};\r\n\r\nResult.defaultProps = {\r\n  steps: undefined,\r\n  triggerNextStep: undefined,\r\n};\r\n\r\nfunction App(props) {\r\n  // const [result, setResult] = useState(null);\r\n  // // const [userData, setUserData] = useState(null);\r\n  // // const [category, setCategory] = useState(null);\r\n  // // const [department, setDepartment] = useState(null);\r\n\r\n  // // UseEffect Hook to make a POST request\r\n  // // console.log(userData);\r\n  // useEffect(() => {\r\n  //   if (userData != null) {\r\n  //     // POST request using axios inside useEffect React hook\r\n  //     const getResponse = async () => {\r\n  //       const article = { name: userData };\r\n  //       let api_data = await axios.post(\r\n  //         \"http://127.0.0.1:5000/api/user-response\",\r\n  //         article\r\n  //       );\r\n  //       setResult(api_data.data.dept);\r\n  //       console.log(api_data.data.dept, typeof api_data.data);\r\n  //     };\r\n  //     getResponse();\r\n  //   }\r\n  // console.log(userData);\r\n  // }, [userData]);\r\n  // console.log(\"result\", result);\r\n  // let newResult = JSON.stringify(result);\r\n  // console.log(newResult);\r\n\r\n  function dummy(value) {\r\n    // console.log(value);\r\n    // setUserData(value);\r\n\r\n    return \"Let me see what I can do to help with \" + value;\r\n  }\r\n  let nextResponse = \"Understandable, have a nice day!\";\r\n\r\n  const config = {\r\n    width: \"300px\",\r\n    height: \"400px\",\r\n    floating: true,\r\n    headerTitle: \"KnugBot\",\r\n    placeholder: \"Type response here\",\r\n    botAvatar: Knugget,\r\n    hideUserAvatar: true,\r\n  };\r\n\r\n  const steps = [\r\n    {\r\n      id: \"Greeting\",\r\n      message: \"It me, Knugget! Need some knugvising?\",\r\n      trigger: \"2\",\r\n    },\r\n\r\n    {\r\n      id: \"2\",\r\n      options: [\r\n        { value: 1, label: \"Yes\", trigger: \"3\" },\r\n        { value: 2, label: \"No\", trigger: \"4\" },\r\n      ],\r\n    },\r\n    {\r\n      id: \"3\",\r\n      message: \"How can I help?\",\r\n      trigger: \"userInput\",\r\n    },\r\n    {\r\n      id: \"4\",\r\n      message: nextResponse,\r\n      end: true,\r\n    },\r\n\r\n    {\r\n      id: \"userInput\",\r\n      user: true,\r\n      trigger: \"6\",\r\n    },\r\n    {\r\n      id: \"6\",\r\n      // this will send a string to the dummy function instead of an object.\r\n      // message: ,\r\n      message: ({ previousValue }) => dummy(previousValue),\r\n      trigger: \"7\",\r\n    },\r\n    {\r\n      id: \"7\",\r\n      component: <Result />,\r\n      waitAction: true,\r\n      trigger: \"Greeting\",\r\n    },\r\n  ];\r\n\r\n  const theme = {\r\n    background: \"#fff\",\r\n    fontFamily: \"Arial\",\r\n    headerBgColor: \"#ffd700\",\r\n    headerFontColor: \"#fff\",\r\n    headerFontSize: \"15px\",\r\n    botBubbleColor: \"#eee\",\r\n    botFontColor: \"#000000\",\r\n    userBubbleColor: \"#fff\",\r\n    userFontColor: \"#000000\",\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div>\r\n        <ChatBot recognitionEnable={true} steps={steps} {...config} />\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":3,"column":17,"nodeType":"26","messageId":"27","endLine":3,"endColumn":25},{"ruleId":"24","severity":1,"message":"28","line":3,"column":27,"nodeType":"26","messageId":"27","endLine":3,"endColumn":36},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]