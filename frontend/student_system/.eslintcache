[{"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/index.js":"1","/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/reportWebVitals.js":"2","/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/App.js":"3","/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/Components/Result.js":"4","/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/Components/ThankYou.js":"5"},{"size":505,"mtime":1619310438613,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1610884639990,"results":"8","hashOfConfig":"7"},{"size":4480,"mtime":1619264374753,"results":"9","hashOfConfig":"7"},{"size":12917,"mtime":1619309930492,"results":"10","hashOfConfig":"7"},{"size":1163,"mtime":1619253908416,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ii4i1d",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/index.js",[],"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/reportWebVitals.js",[],["24","25"],"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/App.js",[],"/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/Components/Result.js",["26"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nimport Chatbot, { Loading } from \"react-simple-chatbot\";\nimport styles from \"./Result.module.css\";\nimport Linkify from \"react-linkify\";\n\nclass Result extends Component {\n  constructor(props) {\n    super(props);\n\n    // sets initial states\n    this.state = {\n      loading: true,\n      result: \"\",\n      threshold: \"\",\n      trigger: false,\n      counter: 0,\n      questionAsked: \"\",\n      // wholeResponse: \"\",\n    };\n\n    this.resetWithString = this.resetWithString.bind(this);\n  }\n\n  async componentDidMount() {\n    let counter = sessionStorage.getItem(\"counter\");\n    if (counter === undefined) {\n      counter = 0;\n      sessionStorage.setItem(\"counter\", counter);\n    }\n    const { steps } = this.props;\n    const lookup = steps.userInput.value;\n    const input = { name: lookup };\n    // stores returned data in api_response\n    const api_response = await axios.post(\n      \"http://127.0.0.1:5000/api/get-user-response\",\n      input\n    );\n    // set the state to the relevant data it needs to hold\n    this.setState({\n      loading: false,\n      result: api_response.data.answer,\n      threshold: api_response.data.probability,\n      counter: counter,\n      questionAsked: lookup,\n      // wholeResponse: api_response.data,\n    });\n  }\n\n  // increments the counter and stores it back into local storage\n  increment = () => {\n    let count = this.state.counter;\n    count++;\n    sessionStorage.setItem(\"counter\", count);\n  };\n\n  // resets the counter to 0 and stores it back to local storage\n  reset = () => {\n    sessionStorage.setItem(\"counter\", 0);\n  };\n\n  async saveUnasweredQuestion() {\n    const { steps } = this.props;\n    const lookup = steps.userInput.value;\n    let options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(lookup),\n    };\n    let response = await fetch(\n      \"http://127.0.0.1:5000/api/save-question-asked\",\n      options\n    );\n    let result = await response.json();\n    console.log(result);\n  }\n  // reset the counter to 0 and returns a string to display on the UI\n  resetWithString() {\n    if (this.state.counter > 0) {\n      sessionStorage.setItem(\"counter\", 0);\n      this.saveUnasweredQuestion();\n    }\n    // save the question to the database here\n    // you can call another function that handles\n    // that or just do it all in here\n    return \"sorry here's a contact\";\n  }\n\n  // Triggers the next entity in the steps (from react-simple-chatbot)\n  triggerGreeting() {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep({ trigger: \"Greeting\" });\n    });\n  }\n\n  // Step 2 from conversation design\n  triggerMoreHelp(callback) {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep({ trigger: \"More Help\" });\n      if (callback !== undefined) {\n        callback();\n      }\n    });\n  }\n\n  // triggers thank you\n  triggerThankYou() {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep({ trigger: \"Thank you\" });\n    });\n  }\n\n  // triggers Even More Help\n  triggerEvenMoreHelp() {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep({ trigger: \"Even More Help\" });\n    });\n  }\n\n  // triggers Sorry Thank you\n  triggerSorryThankYou() {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep({ trigger: \"Sorry Thank you\" });\n    });\n  }\n\n  // triggers ask again differently\n  triggerAskAgainDifferently() {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep({ trigger: \"ask again differently\" });\n    });\n  }\n\n  // Renders the answer display box in the chatbot\n  render() {\n    // the constants that are passed in the render (state values)\n    const { trigger, loading, result, threshold } = this.state;\n    // console.log(wholeResponse);\n\n    // if result if no match then ask again\n    if (this.state.counter >= 2) {\n      if (result !== \"no match\") {\n        // Threshold 2 within else (if counter >= 2)\n        if (threshold >= 0.99) {\n          return (\n            <div className={styles.body}>\n              {loading ? <Loading /> : <Linkify>{result}</Linkify>}\n              {!loading && (\n                <div\n                  style={{\n                    textAlign: \"center\",\n                    margin: 20,\n                  }}\n                >\n                  Is there something else I can help you with?\n                  <div>\n                    {!trigger && (\n                      <button\n                        className={styles.button}\n                        onClick={() => {\n                          this.triggerMoreHelp();\n                          this.reset();\n                        }}\n                      >\n                        Yes\n                      </button>\n                    )}\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerThankYou();\n                          this.reset();\n                        }}\n                        className={styles.button}\n                      >\n                        No\n                      </button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        }\n\n        // Threshold  1 and 2 (.50 - .90)\n        if (threshold < 0.99 && threshold > 0.5) {\n          return (\n            <div className={styles.body}>\n              {loading ? <Loading /> : <Linkify>{result}</Linkify>}\n              {!loading && (\n                <div\n                  style={{\n                    textAlign: \"center\",\n                    margin: 20,\n                  }}\n                >\n                  Did this answer your question?\n                  <div>\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerEvenMoreHelp();\n                          this.reset();\n                        }}\n                        className={styles.button}\n                      >\n                        Yes\n                      </button>\n                    )}\n                    {!trigger && (\n                      <button\n                        onClick={() => this.triggerMoreHelp()}\n                        className={styles.button}\n                      >\n                        No\n                      </button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        }\n\n        // Threshold 1 within else (if counter >= 2)\n        if (threshold <= 0.5) {\n          return (\n            <div className={styles.body}>\n              {loading ? <Loading /> : this.resetWithString()}\n            </div>\n          );\n        }\n      }\n      // else if result === no match\n      else {\n        return (\n          <div className={styles.body}>\n            {loading ? <Loading /> : this.resetWithString()}\n          </div>\n        );\n      }\n    } else {\n      if (result !== \"no match\") {\n        // Threshold 2 within counter < 2\n        if (threshold >= 0.99) {\n          return (\n            <div className={styles.body}>\n              {loading ? (\n                <Loading />\n              ) : (\n                <Linkify className={styles.linkify}>{result}</Linkify>\n              )}\n              {!loading && (\n                <div\n                  style={{\n                    textAlign: \"center\",\n                    margin: 20,\n                  }}\n                >\n                  Is there something else I can help you with?\n                  <div>\n                    {!trigger && (\n                      <button\n                        className={styles.button}\n                        onClick={() => {\n                          this.triggerMoreHelp();\n                          this.reset();\n                        }}\n                      >\n                        Yes\n                      </button>\n                    )}\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerThankYou();\n                          this.reset();\n                        }}\n                        className={styles.button}\n                      >\n                        No\n                      </button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        }\n\n        // Threshold  1 and 2 (.50 - .90) within counter < 2\n        if (threshold < 0.99 && threshold > 0.5) {\n          return (\n            <div className={styles.body}>\n              {loading ? <Loading /> : <Linkify>{result}</Linkify>}\n              {!loading && (\n                <div\n                  style={{\n                    textAlign: \"center\",\n                    margin: 20,\n                  }}\n                >\n                  Did this answer your question?\n                  <div>\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerEvenMoreHelp();\n                          this.reset();\n                        }}\n                        className={styles.button}\n                      >\n                        Yes\n                      </button>\n                    )}\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerAskAgainDifferently();\n                          this.increment();\n                        }}\n                        className={styles.button}\n                      >\n                        No\n                      </button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        }\n\n        // Threshold 1 within counter < 2\n        if (threshold < 0.5) {\n          return (\n            <div className={styles.body}>\n              {loading ? (\n                <Loading />\n              ) : (\n                \"Sorry I don't quite understand your question. Could you try asking it slightly differently? \"\n              )}\n              {!loading && (\n                <div\n                  style={{\n                    textAlign: \"center\",\n                    margin: 20,\n                  }}\n                >\n                  <div>\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerMoreHelp();\n                          this.increment();\n                        }}\n                        className={styles.button}\n                      >\n                        Yes\n                      </button>\n                    )}\n                    {!trigger && (\n                      <button\n                        onClick={() => {\n                          this.triggerThankYou();\n                          this.reset();\n                        }}\n                        className={styles.button}\n                      >\n                        No\n                      </button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        }\n      }\n      // if result === no match\n      else {\n        return (\n          <div className={styles.body}>\n            {loading ? (\n              <Loading />\n            ) : (\n              \"Couldn't find what you were looking for. Would you like to try again?\"\n            )}\n            {!loading && (\n              <div\n                style={{\n                  textAlign: \"center\",\n                  margin: 20,\n                }}\n              >\n                <div>\n                  {!trigger && (\n                    <button\n                      onClick={() => {\n                        this.triggerMoreHelp(this.increment);\n                        // this.increment();\n                      }}\n                      className={styles.button}\n                    >\n                      Yes\n                    </button>\n                  )}\n                  {!trigger && (\n                    <button\n                      onClick={() => {\n                        this.triggerSorryThankYou();\n                        this.reset();\n                      }}\n                      className={styles.button}\n                    >\n                      No\n                    </button>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      }\n    }\n  }\n}\nResult.propTypes = {\n  steps: PropTypes.object,\n  triggerNextStep: PropTypes.func,\n};\n\nResult.defaultProps = {\n  steps: undefined,\n  triggerNextStep: undefined,\n};\n\nexport default Result;\n","/Users/RajPatel/Documents/GitHub/ucf-ai-advising-chatbot/frontend/student_system/src/Components/ThankYou.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":4,"column":8,"nodeType":"33","messageId":"34","endLine":4,"endColumn":15},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'Chatbot' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]